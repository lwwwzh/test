{'TMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'PYTHONIOENCODING': 'cp936', 'COMPUTERNAME': 'LUWENZHE', 'VS140COMNTOOLS': 'D:\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'USERDOMAIN': 'LUWENZHE', 'PSMODULEPATH': 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 42 Stepping 7, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '2a07', 'M2': 'D:\\apache-maven-3.2.5\\bin;', 'PATH': 'D:\\Embarcadero\\RAD Studio\\11.0\\bin;C:\\Users\\Public\\Documents\\RAD Studio\\11.0\\Bpl;D:\\Embarcadero\\RAD Studio\\11.0\\bin64;C:\\Users\\Public\\Documents\\RAD Studio\\11.0\\Bpl\\Win64;C:\\Ruby193\\bin;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files\\Java\\jdk1.8.0_65\\bin;C:\\Program Files\\Java\\jdk1.8.0_65\\jre\\bin;C:\\Program Files\\Common Files\\NetSarang;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;D:\\TortoiseSVN\\bin;D:\\apache-maven-3.2.5\\bin;;C:\\scala\\bin;C:\\Program Files\\Git\\cmd;D:\\gVimPortable_7.4\\vim74;C:\\Program Files\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Python27;C:\\Python27\\Scripts;D:\\nodejs\\;D:\\SSH Communications Security\\SSH Secure Shell;C:\\Users\\Administrator\\AppData\\Roaming\\npm', 'WINGDB_ACTIVE': '6860', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'WINGDB_SPAWNCOOKIE': 'n4IhdfFuRTXluEof', 'PROCESSOR_ARCHITECTURE': 'x86', 'MAVEN_OPTS': '-Xms256m -Xmx512m', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'TNS_ADMIN': 'D:\\instantclient_11_2\\NETWORK\\ADMIN', 'LOCALAPPDATA': 'C:\\Users\\Administrator\\AppData\\Local', 'HOMEPATH': '\\Users\\Administrator', 'M2_HOME': 'D:\\apache-maven-3.2.5', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.8.0_65', 'NLS_LANG': 'AMERICAN', 'SQLMAP': 'E:\\lwwwzh\\tools\\sqlmap-master', 'LOGONSERVER': '\\\\LUWENZHE', 'SYSTEMROOT': 'C:\\windows', 'WINDOWS_TRACING_FLAGS': '3', 'PROGRAMDATA': 'C:\\ProgramData', 'CLASSPATH': 'C:\\Program Files\\Java\\jdk1.8.0_65\\lib;C:\\Program Files\\Java\\jdk1.8.0_65\\lib\\tools.jar', 'DEVMGR_SHOW_DETAILS': '1', 'USERNAME': 'Administrator', 'SESSIONNAME': 'Console', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.RB;.RBW', 'IBREDISTDIR': 'C:\\Users\\Public\\Documents\\InterBase\\redist\\InterBaseXE3', 'WINGDB_PARENT_PIDS': '6860', 'MOZ_PLUGIN_PATH': 'D:\\Foxit Software\\plugins\\', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\windows', 'TEMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'VBROKERDIR': 'd:\\Inprise\\vbroker', 'SYSTEMDRIVE': 'C:', 'SCALA_HOME': 'C:\\scala', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\Administrator\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\Administrator'}